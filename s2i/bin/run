#!/bin/bash -e -x
#
# S2I run script for the 'shepherd-drupal' image.
# The run script executes the server that runs your application.
#
# For more information see the documentation:
#      https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

# Make umask more permissive.
echo "---> Setting umask to 0002."
umask 0002

# Ensure /code/web directory exists, preventing Apache from crashing.
echo "---> Ensuring /code/web directory exists."
mkdir -p /code/web

# Is the $WEB_PATH set?
if [ -n "${WEB_PATH}" ]; then
  echo "---> Enabling web path."
  # If it's set, ensure it starts with a slash.
  WEB_PATH=$(echo ${WEB_PATH} | sed 's#^\([^/]\)#/\1#')

  # Unset $WEB_PATH if it's just a slash. Otherwise Apache does weird things.
  if [ "${WEB_PATH}" == "/" ]; then
    unset WEB_PATH
  else
    # Set rewrite base in htaccess to WEB_PATH to generate correct URLs.
    # Uses three steps via a temp file because /code/web is not group writable.
    HTACCESS_TEMP=$(tempfile)
    sed "s@# RewriteBase /\$@RewriteBase ${WEB_PATH}@g" /code/web/.htaccess > ${HTACCESS_TEMP}
    cp ${HTACCESS_TEMP} /code/web/.htaccess
    rm ${HTACCESS_TEMP}
  fi
fi

# Is the bare domain value set?
if [ -n "${BARE_DOMAIN}" ]; then
  echo "---> Enabling bare domain for Drupal."
  # If it's set, uncomment the bare domain settings
  php -r '$htaccess = file_get_contents("/code/web/.htaccess");
  $htaccess = str_replace("# RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]", "RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]", $htaccess);
  $htaccess = str_replace("# RewriteRule ^ http%{ENV:protossl}://%1%{REQUEST_URI} [L,R=301]", "RewriteRule ^ http%{ENV:protossl}://%1%{REQUEST_URI} [L,R=301]", $htaccess);
  file_put_contents("/tmp/.htaccess", $htaccess);'
  cp /tmp/.htaccess /code/web/.htaccess
  rm /tmp/.htaccess
fi

echo "---> Ensuring public files directory ${PUBLIC_DIR} exists."
# If $PUBLIC_DIR is set, ensure it exists and has correct permissions.
if [ -n "${PUBLIC_DIR}" ]; then
  mkdir -p ${PUBLIC_DIR}
fi

echo "---> Ensuring private files directory ${PRIVATE_DIR} exists."
# If $PRIVATE_DIR is set, ensure it exists and has correct permissions.
if [ -n "${PRIVATE_DIR}" ]; then
  mkdir -p ${PRIVATE_DIR}
fi

echo "---> Ensuring temporary files directory ${TMP_DIR} exists."
# If $TMP_DIR is set, ensure it exists and has correct permissions.
if [ -n "${TMP_DIR}" ]; then
  mkdir -p ${TMP_DIR}
fi

echo "---> Starting apache2..."
exec apache2 -D FOREGROUND
